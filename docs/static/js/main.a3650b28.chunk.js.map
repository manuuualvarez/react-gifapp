{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBAAMC,SATW,SAAEC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAU,OAAOP,GAAP,mBAAsBO,OAC/CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,YAAY,eACZC,MAAOV,EACPW,SAlBc,SAAER,GACxBF,EAAeE,EAAES,OAAOF,a,QCNnBG,EAAc,SAAC,GAAqB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAElC,OACI,sBAAKC,UAAU,uBAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,kCAAMA,S,uBCLLK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAUF,GAD7C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QATvB,kBAYZY,GAZY,4CAAH,sDCIPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACdrB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAW,WACPlB,EAAQC,GAAUkB,MAAM,SAAAC,GACpBH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAIlB,CAACd,IACGe,EDX0BK,CAAapB,GAAjCW,EAFwB,EAE7BL,KAAaQ,EAFgB,EAEhBA,QAErB,OACI,qCACI,mCAAOd,EAAP,OAEEc,GAAW,mBAAGlB,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SACOe,EAAOH,KAAK,SAAAC,GAAG,OAEd,cAAC,EAAD,eAESA,GADCA,EAAIC,aEdrBW,EAAe,WAAO,IAAD,EAEM1C,mBAAS,IAFf,mBAEvBQ,EAFuB,KAEXT,EAFW,KAI9B,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BACOS,EAAWqB,KAAK,SAACR,GAAD,OACf,cAAC,EAAD,CAEIA,SAAWA,GADJA,YCZ/BsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a3650b28.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) => { \n        setInputValue( e.target.value ); \n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n        if( inputValue.trim().length > 2 ) {\n            setCategories( categories => [  inputValue, ...categories ] );\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                placeholder=\"Add Category\" \n                value={inputValue}\n                onChange={ handleInputChange }\n            />  \n\n        </form> \n    )\n}\n\nAddCategory.propTypes = { \n    setCategories: PropTypes.func.isRequired\n}\n\n\n","import React from 'react'\n\nexport const GifGridItem = ( { title, url }) => {\n\n    return (\n        <div className=\"card animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p> { title }</p>\n        </div>\n    )\n}\n","\n\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=2FV9Y0gRXYiGsHPQKrqc3ljiXklKbsrW`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    return gifs;\n}","import React from 'react'\n// Components\nimport {  GifGridItem } from './GifGridItem'\n// Hooks\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nexport const GifGrid = ( {category }) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3> { category } </h3>\n        \n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>  }\n\n            <div className=\"card-grid\">\n                {  images.map( img =>  \n\n                    <GifGridItem  \n                        key={ img.id }\n                        { ...img }\n                    />       \n                    )\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from 'react';\n\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifs(category).then( imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n        \n    }, [category]);\n    return state;\n};","import React, { useState } from 'react'\n\n// Components\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    return (\n        <>\n            <h2>Gif expert App</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n\n            <ol>\n                {  categories.map( (category) =>  \n                    <GifGrid \n                        key= { category }\n                        category= {category} \n                    />\n                    )   \n                }\n            </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// Components\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}